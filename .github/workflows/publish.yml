env:
  version: 0.1
  pyinstaller_version: 4.7
  main: main
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
  artifact_name: 'bili_live_bot'

name: Package Application with Pyinstaller
on:
  push:
    branches: [ develop ] # for test

jobs:

  test_upload_artifacts:
    runs-on: ubuntu-latest
    steps:
    - name: create temp file
      run: |
        echo "hello world" > test.txt
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.artifact_name }}
        path: ./test.txt

  build_windows:
    if: ${{ false }}
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    
    #- name: Package Application Windows
    #  uses: JackMcKew/pyinstaller-action-windows@main
    #  with:
    #    path: '.'

    - name: setup python 3.9.7
      uses: actions/setup-python@v2
      with:
        python-version: '3.9.7'

    - name: install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install -r requirements.txt
        pip install pyinstaller==${{ env.pyinstaller_version }}
        pyinstaller --clean -y --dist ./dist --onefile ${{ env.main }}.py
        chown -R --reference=. ./dist

    - name: Rename File
      run: |
        ren dist/${{ env.main }}.exe ${{ env.artifact_name }}_windows.exe

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.artifact_name }}
        path: ./dist/${{ env.artifact_name }}_windows.exe

  build_linux:
    if: ${{ false }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    #- name: Package Application Windows
    #  uses: JackMcKew/pyinstaller-action-windows@main
    #  with:
    #    path: '.'

    - name: setup python 3.9.7
      uses: actions/setup-python@v2
      with:
        python-version: '3.9.7'

    - name: install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install -r requirements.txt
        pip install pyinstaller==${{ env.pyinstaller_version }}
        pyinstaller --clean -y --dist ./dist --onefile ${{ env.main }}.py
        chown -R --reference=. ./dist

    - name: Rename File
      run: |
        mv ./dist/${{ env.main }} ./dist/${{ env.artifact_name }}_linux

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.artifact_name }}
        path: ./dist/${{ env.artifact_name }}_linux
  
  upload_releases:
    needs: test_upload_artifacts
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      id: download
      with:
        name: ${{ env.artifact_name }}

    - name: Delete tag and release
      id: delete-tag-release
      uses: dev-drprasad/delete-tag-and-release@v0.1.2
      with:
        tag_name: ${{ env.version }}
        delete_release: true

    - name: zip the directory
      run: |
        echo ${{steps.download.outputs.download-path}}
        [ -d ${{steps.download.outputs.download-path}} ] && ls -la ${{ steps.download.outputs.download-path }}
        zip -r ${{ env.artifact_name }}.zip ${{steps.download.outputs.download-path}}
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.version }}
        release_name: Release ${{ github.repository }}-${{ env.version }}
        body: check the commits for update
        draft: false
        prerelease: false

    - name: Upload Release
      id: upload-release-asset-xpi
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./${{ artifact_name }}.zip
        asset_name: ${{ artifact_name }}.zip
        asset_content_type: application/zip

    